package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"strings"
)

var (
	modelDir      = flag.String("model-dir", "", "specify the model directory; must be set")
	modelNames    = flag.String("model-names", "", "specify the comma-separated list of model name; must be set")
	modelPkgPath  = flag.String("model-pkg-path", "", "specify the package path corresponding to the model directory; automatically calculated by default")
	modelPkgAlias = flag.String("model-pkg-alias", "", "specify a model package alias; default no alias")
	daoDir        = flag.String("dao-dir", "", "specify the output directory of dao files; must be set")
	daoPkgPath    = flag.String("dao-pkg-path", "", "specify the package path corresponding to the output directory of the dao files; automatically generated by default")
	subPkgEnable  = flag.Bool("sub-pkg-enable", false, "specify whether to enable sub package; default disable")
	subPkgStyle   = flag.String("sub-pkg-style", "kebab", "specify the generation style for sub package; options: kebab | underscore | lower | camel | pascal; default is kebab")
	counterName   = flag.String("counter-name", "", "specify the counter name; default is counter")
	fileNameStyle = flag.String("file-style", "underscore", "specify the generation style for file; options: kebab | underscore | lower | camel | pascal; default is underscore")
)

// Usage is a replacement usage function for the flags package.
func usage() {
	fmt.Fprintf(os.Stderr, "Usage of mongo-dao-generator:\n")
	fmt.Fprintf(os.Stderr, "\tmongo-dao-generator [flags] -model-dir=. -model-names=T,T -dao-dir=./dao\n")
	fmt.Fprintf(os.Stderr, "For more information, see:\n")
	fmt.Fprintf(os.Stderr, "\thttps://github.com/dobyte/mongo-dao-generator\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

//go:generate mongo-dao-generator -type=Mail,User
func main() {
	log.SetFlags(0)
	log.SetPrefix("mongo-dao-generator: ")
	flag.Usage = usage
	flag.Parse()

	if len(*modelDir) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	if len(*modelNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	if len(*daoDir) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	newGenerator(&options{
		daoDir:        *daoDir,
		daoPkgPath:    *daoPkgPath,
		modelDir:      *modelDir,
		modelNames:    strings.Split(*modelNames, ","),
		modelPkgPath:  *modelPkgPath,
		modelPkgAlias: *modelPkgAlias,
		subPkgEnable:  *subPkgEnable,
		subPkgStyle:   style(*subPkgStyle),
		counterName:   *counterName,
		fileNameStyle: style(*fileNameStyle),
	}).makeDao()
}
